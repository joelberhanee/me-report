{# templates/report/report.html.twig #}

{% extends "base.html.twig" %}

{% block title %}Redovisningstexter{% endblock %}

{% block body %}
    <h1>Kursens Redovisningstexter</h1>
    <p>Här samlas mina redovisningar för kursens olika moment.</p>

    <ul>
        <li><a href="#kmom01">Kmom01</a></li>
        <li><a href="#kmom02">Kmom02</a></li>
        <li><a href="#kmom03">Kmom03</a></li>
        <li><a href="#kmom04">Kmom04</a></li>
        <li><a href="#kmom05">Kmom05</a></li>
        <li><a href="#kmom06">Kmom06</a></li>
        <li><a href="#kmom7-10">Kmom 7/10</a></li>
    </ul>

    <div id="kmom01">
        <h2>Kmom01</h2>
        <p>
            Jag har inga större förkunskaper kring objektorientering. Jag har läst lite om det och kollat lite videos för att få förståelse kring ämnet samt grunderna.
        </p>
        <p>
            Det man först och främst behöver är att bli vän med manualen för att underlätta och kunna lösa problem oavsett vilket språk man kodar med vill jag påstå. Man måste veta att en klass innehåller egenskaper och definieras med ”class”. För att göra objekt av en klass använder man ”new”. Ett objekt är en insats av en klass, alltså en version av klassens egenskaper.
        </p>
        <p>
            Jag behövde en liten stund för att komma in i strukturen och allt med koden till den här uppgiften. Det är ett nytt ramverk som jag inte har jobbat med tidigare och behövde bekanta mig med. Men efter att ha jobbat igenom det känns det bra, jag valde att använda SASS som vi använde i design kursen för att styla sidan. Twig filer och allt har jag lite minne av från tidigare kurser.
        </p>
        <p>
            I denna text kan man läsa om fördelen med att följa aktuella kodningsstandarder och använda den senaste PHP-versionen för säkerhet och bästa möjliga prestanda. Man nämner också vikten av testbar kod med hjälp av TDD och användning av Composer som vi använde i uppgiften för att hantera projektet effektivt.
        </p>
        <p>
            Min TIL i detta kmom får bli Symphony samt objektorientering som är nytt för mig, hela strukturen samt allt som kom med det var nya lärdomar. Sen finns det lite likheter med tidigare kunskaper man har fått från kurserna.
        </p>
    </div>

    <div id="kmom02">
        <h2>Kmom02</h2>
        <p>
            Arv betyder att en klass ärver egenskaper från en annan, med det kan man återanvända koden för att göra något mer. Jag ärvde till exempel CardGraphic från Card för att kunna utveckla och addera det visuella med mina kort, så som färg och symboler.
        </p>
        <p>
            Komposition betyder att en klass består av andra objekt. I mitt fall i detta kurmoment, DeckOfCards den innehöll flera Card objekt vilket gjorde mitt projekt mer flexibelt.
        </p>
        <p>
            Interface använde jag inte men som jag har uppfattat det så definieras metoder som sedan ska implementeras av en klass.
        </p>
        <p>
            Trait använde jag inte heller men med trait kan man återanvända kod i flera klasser utan att ärva.
        </p>
        <p>
            Jag skapade klasser för att kunna hantera kortleken och med hjälp av uppgiftens tips så använde jag alla fyra… Card, CardGraphic, CardHand och DeckOfCards. Jag började med grunderna och följde strukturen av dice uppgiften för att ta mig igenom det. Sedan adderade jag sessioner så att saker lagrades och la även till flash meddelanden så att alla drag blev tydliga. Jag implementera även möjlighet till att blanda kortleken samt drag av ett eller flera kort. Strukturen blev jag ganska nöjd med, klasserna blev bra och jag lyckades använda både arv och komposition. Sen känner jag att jag hade kunnat bli bättre på att återanvända kod istället för att repetera saker mycket. Men det blir jag nog bättre på när jag är ännu mer bekväm med strukturen.
        </p>
        <p>
            Symfony börjar bli mycket mer tydligt för mig och det börjar bli naturligt. Jag har alltid känt att det här jobbigt med de första två kursmomenten då man ska ställa om till något nytt. Jag har fått det att fungera bra med mina router, kontroller och twig filer. Det är fortfarande många mappar och filer att hålla koll på men det känns som att jag börjar bli varm i kläderna med Symfony.
        </p>
        <p>
            Min TIL i detta kursmoment är nog klasser med arv och komposition samt sessioner och flash-meddelanden.
        </p>
    </div>

    <div id="kmom03">
        <h2>Kmom03</h2>
        <p>
            Flödesschemat och psuedokod ser jag som en form av mindmapping innan man drar igång med ett arbete. Jag tror att vissa drar större nytta utav det än andra. Jag personligen är inget större fan av det… jag föredrar att direkt hoppa in i koden och leka mig fram lite där. Jag kan däremot förstå att det kan vara användbart när man jobbar i team så att alla är på samma båt, har samma vision och jobbar mot samma mål. Sen är det första gången jag jobbar med det så jag ska inte vara allt för hård emot det.
        </p>
        <p>
            Jag började med att kolla vilka av mina tidigare klasser som jag använt i tidigare uppgifter kan återanvändas. Card, CardHand, DeckOfCard samt CardGraphic var de som var relevanta och intressanta. Så jag hade gjort ett otroligt förarbete med kortleken i uppgiften, jag hade alltså en hel kortlek redo. Jag tog även med mig flash meddelanden som jag ville återanvända i detta spel också. Jag gjorde sedan en controller fil där jag hade all min kod för att sedan när jag kände mig färdig dela upp det och ha en kontroller fil med så lite kod som möjligt och en fil med all kod och alla klasser.
        </p>
        <p>
            Jag började med att hämta kortleken med DeckOfCards klassen och blanda kortleken genom shuffle som jag redan hade sen skapade jag två CardHands med en player och en bank. Sedan skapade sessionerna jag ville aktivera, redan där kände jag att jag hade kommit en bra bit. Jag använde mig av if satser genom resten av koden och tog tipset från uppgiften med att banken plockar kort tills den har 17 eller mer. Sessionerna var nyckeln genom hela koden för att spelet skulle fungera. Jag fick en del varningar från Composer Lint när jag använde mina tidigare klasser men lyckades googla fram att ”instanceof” sedan klassen man använde skulle få bort det, vilket det gjorde.
        </p>
        <p>
            Tidigare uppgift med kortleken var otroligt nyttig och jag försökte genom hela denna uppgift använda samma struktur och tankesätt.
        </p>
        <p>
            Jag har en bra känsla av ramverket jag känner att jag har kommit in i det samt att det inte är super jobbigt. Jag börjar bli bekväm med Symfony och tycker att det börjar bli kul.
        </p>
        <p>
            Att bygga ett kortspel med Symfony är min TIL i det stora hela, sedan lärde jag mig massa nytt genom hela kursmomentet. Instanceof samt att ha så lite kod som möjligt i sina controllers är andra lärdomar.
        </p>
    </div>    

    <div id="kmom04">
        <h2>Kmom04</h2>
        <p>
            Jag tycker att det var ganska kul att få jobba med PHPUNIT till en början så trodde jag att det skulle vara jätte krångligt och svårt men efter att ha läst igenom en del samt lyssnat på föreläsningarna och även gått igenom övningarna med YouTube föreläsningarna så började jag känna att det faktiskt inte är alltför komplicerat. Saker börja klicka och jag började förstå hela konceptet med att testa och varför man gör det. Något jag hade problem med var att få upp docs/coverage på lokala sidan men inte studentservern, det lyckades jag inte med.
        </p>
        <p>
            Mitt mål var att få 100 på alla tester och jag kan nu vara stolt och säga att jag lyckades med det slutligen. Det tog sin tid och länge så strulade jag med min CardHandTest.php kod där jag inte lyckades få ordning på alla tester och hade länge ca 70–75 % kodtäckning. Problemet låg i att testa essets värde när det förändras vid dragning av nytt kort och att värdet ska förvandlas till ett och inte överstiga 21… den var krånglig. Men jag lyckades lösa det med att testa siffror där lösningen blir utsatt för att överstiga om inte förvandlingen av esset görs, även där fick jag korrigera lite med klassen för det. Det är väl det som är huvudsaken med enhetstestning så, en del lärdom.
        </p>
        <p>
            När det gäller vad jag upplever kring hur testbar min kod är så blir det faktiskt ganska svårt för mig att svara på det. Om jag ska kolla på kodtäckningen så lyckades jag få alla tester till 100 % och därför vill jag tro att min kod är testbar och ganska bra men sen får man inte glömma att jag inte har jätte stora erfarenheter inom detta så jag kanske inte sitter på tillräckligt med kunskap för att svara på det. Men min upplevelse säger att min kod är testbar.
        </p>
        <p>
            Jag fick faktiskt gå in och göra lite justeringar på min kod för att få en testerna att funka rätt och för att göra den mer testbar helt enkelt. Det blev inte alltför stora ändringar, men jag fick gå in och korrigera lite i mina klasser efter att ha fått varningar på dem… främst med getAsString och __toString. Denna del tyckte jag var den krångligaste delen. Jag hade min Composer lint som bråkade med min PHPunit. När jag fick rätt med den ena fanns det error på den andra. Men till slut löste jag det med att lägga till en ganska identisk kod fast i annat namn. Lösningen kanske inte är super korrekt men det fick vara så för denna gång.
        </p>
        <p>
            I föreläsningarna berätta man om att det kan vara en fördel att skriva testkoderna innan den vanliga koden. Så jag tror absolut att en testbar kod kan vara till hjälp men jag tror inte det identifierar en snygg och ren kod.
        </p>
        <p>
            Min TIL i detta kursmoment är självklart allt med att enhetstesta men om jag får gå in lite djupare i det så är det att jag lärde mig att man kan använda use och ärva även i testerna istället för att exempelvis använda assertInstanceOf och sedan ”\App\Card\Card”.
        </p>
    </div>

    <div id="kmom05">
        <h2>Kmom05</h2>    
        <p>Jag känner att det gick bra att jobba igenom övningen med Symfony och Doctrine. När jag kollade igenom övningen själv var det snurrigt men sen tillsammans med video föreläsningen så blev det tydligare. Det var nytt att se hur man kan jobba med Symfony och databasen. I vissa delar av övningen kände jag att behövde mer fokus för att förstå Doctrine. Allt med entiteter, repository samt migration, det var nytt för mig.</p>
    
        <p>När jag byggde min applikation så tog jag stöd från övningen men gjorde det på mitt vis. Jag försökte skapa ett bibliotek där allt är simpelt och smidigt. En första sida där man får möjlighet att navigera vidare. Att lägga till en ny bok eller se alla tillgängliga böcker. Jag hade som mål att ha en tydlig och simpel navigering mellan sidorna i biblioteket och använde mig av tydliga färger på knapparna för att göra det tydligt. User experience var viktigt och fokuset i min applikation. Utifrån mina erfarenheter av bibliotek så brukar oftast vara krångligt, därför var mitt mål att skapa ett bibliotek som inte är det. En simpel och fin styling samt en fin kod.</p>
    
        <p>Efter att ha gjort övningen och fått testa på denna uppgiften så känner jag att det har gått bra att jobba med ORM i CRUD. Doctrine gör det smidigt att använda databasen, man slapp skriva massa SQL koder vilket jag egentligen tycker är kul men detta underlättade en del. Jag kunde istället fokusera på PHP medans ORM skötte det med databasen. Jag tror att man märker av fördelen med ORM i ännu större applikationer där man jobbar objektorienterat. Om jag jämför med SQL kan jag ibland känna att det kanske hade varit snabbare att bara skriva en SQL kod.</p>
    
        <p>Min uppfattning om ORM är att det strukturerar arbetet bättre och enklare att hantera. Hela kodbasen blir mer tydlig speciellt när man kan hantera saker direkt i entiteterna. Jämfört med SQL är ORM mindre upprepande och det känns som att man har ett mindre ansvar</p>
    
        <p>Min TIL i detta kmom är defintivt hur Symfony integrerar med databasen via Doctrine och ORM.</p>
    </div>

    <div id="kmom06">
        <h2>Kmom06</h2>
        <p>Redovisningstext för kmom06.</p>
    </div>

    <div id="kmom7-10">
        <h2>Kmom 7/10</h2>
        <p>Redovisningstext för kmom7/10.</p>
    </div>

{% endblock %}
