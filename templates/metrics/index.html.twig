{% extends 'base.html.twig' %}

{% block title %}Metrics-analys{% endblock %}

{% block body %}
    <h1>Metrics-analys</h1>

    <h2>Introduktion</h2>

    <h3>6C-modellen</h3>
    <ul>
        <li><strong>Codestyle:</strong> Följer PSR-standarder(PHP Standard Recommendations) och läsbarhet.</li>
        <li><strong>Coverage:</strong> Hur mycket av koden testas.</li>
        <li><strong>Complexity:</strong> Exempelvis Cyclomatic Complexity i metoder och klasser.</li>
        <li><strong>Cohesion:</strong> Om klasser och metoder har syften som är tydliga.</li>
        <li><strong>Coupling:</strong> Handlar om hur beroende klasserna är av varandra.</li>
        <li><strong>CRAP:</strong> Mix av komplexitet och testtäckning som sen ger varningsvärde.</li>
    </ul>

    <h3>Phpmetrics</h3>
    <p>Phpmetrics analyserar kodbasen och utgår från underhållsbarhet, komplexitet och struktur. Min kodbas visade 1 195 rader kod fördelade över 27 klasser. Jag har valt att fokusera jag på dessa områden:</p>

    <h4>Maintainability / complexity och stora klasser</h4>
    <p>Vissa klasser har hög Cyclomatic Complexity och låg Maintainability Index. Klassens färg i cirkeldiagrammet avslöjar underhållbarheten visuellt. Grön, gul och rödaktiga cirklar.</p>
    <ul>
        <li><code>App\Game\GameTwentyOne</code>: Complexity: 9 / Maintainability Index: 34.25</li>
        <li><code>App\Controller\DiceGameController</code>: Complexity: 11 / Maintainability Index: 31.95</li>
    </ul>
    <p>Dessa värden tyder på låg underhållbarhet och hög komplexitet. De ligger under 50, vilket betyder att koden kan vara svår att underhålla. Båda dessa klasser bör bearbetas enligt PHPmetrics.</p>

    <h4>ClassRank</h4>
    <ul>
        <li><code>Card</code> har ett högt ClassRank på 0.33, det innebär att det är en viktig klass i systemet och bör hållas strukturerad.</li>
        <li><code>GameTwentyOne</code> har låg MI men hög interaktion – ett problem med koden kan vara risken för att sprida buggar.</li>
    </ul>

    <p>Höga värden betyder att en klass är central.</p>
    <ul>
        <li><code>App\Card\Card</code>: 0.34</li>
        <li><code>App\Dice\Dice</code>: 0.13</li>
        <li><code>App\Controller\TwentyOneController</code>: 0.02</li>
    </ul>

    <h4>Violations</h4>
    <ul>
        <li>Jag har 7 violations och 2 errors i min kod. Det pekar på att det finns saker som kan förbättras för en mer stabil kod. Mitt mål är att främst fixa errors.</li>
    </ul>

    <p>Bild från PhpMetrics innan ändringar:</p>
    <img src="{{ asset('build/images/phpmetrics.png') }}" alt="Phpmetrics cirklar" width="300">

    <h3>Scrutinizer</h3>
    <p>Scrutinizer är ett verktyg som analyserar kodens kvalitet, struktur samt testtäckning. Rapporten hjälper dig att identifiera svagheter och bättringsområden i koden.</p>
    <ul>
        <li><strong>Kvalitetsbetyg:</strong> 9.93/10 — Visar att min kod håller en mycket hög standard.</li>
        <li><strong>Issues:</strong> 5 stycken — Två av dessa ligger i mina egna klasser/controllers och de handlar komplexitet samt kodstruktur. Övriga handlar om mindre problem med kodstilen.</li>
        <li><strong>Kodtäckning (Coverage):</strong> 10% — En låg nivå som visar att jag borde skriva fler enhetstester för stabilare kod men som också minskar risken för fel vid framtida ändringar.</li>
        <li><strong>Klassbetyg:</strong> De flesta av mina klasser har A i betyg, vilket visar på bra struktur och läsbarhet. Några ligger på B-nivå, alltså finns det förbättringspotential men det är mindre farliga brister.</li>
        <li><strong>Build Status:</strong> Visar ifall projektet går igenom alla kontroller och analyser utan att krascha, det blir en form av bekräftelse ifall koden är körbar och fungerande.</li>
    </ul>

    <h3>Flaskhalsar och förbättringspotential</h3>
    <ul>
        <li><strong>Komplexitet i vissa klasser:</strong> Två av issuesen pekar på att vissa metoder eller klasser har hög komplexitet, vilket kan försvåra underhållningen samt vidareutvecklingen.</li>
        <li><strong>Testtäckning:</strong> Med endast 10% i täckning finns det stor risk för fel vid framtida ändringar. Här har jag en möjlighet att höja kvaliteten genom att göra fler enhetstester.</li>
        <li><strong>Stilproblem:</strong> Några små stilproblem finns kvar i koden, vilket kan påverka läsbarhet och konsekvent kod.</li>
    </ul>

    <h3>Badges</h3>
    <ul>
        <li><img src="https://scrutinizer-ci.com/g/joelberhanee/me-report/badges/quality-score.png?b=main" alt="Quality Score"></li>
        <li><img src="https://scrutinizer-ci.com/g/joelberhanee/me-report/badges/coverage.png?b=main" alt="Code Coverage"></li>
        <li><img src="https://scrutinizer-ci.com/g/joelberhanee/me-report/badges/build.png?b=main" alt="Build Status"></li>
    </ul>

    <h3>Koppling till 6C-modellen</h3>
    <ul>
        <li><strong>Clean:</strong> Kvalitetsbetyget 9.93/10 visar att koden överlag är ren, men några issues bör åtgärdas för ökad likformighet.</li>
        <li><strong>Concise:</strong> Mina <code>ApiControllerJson</code>, <code>GameTwentyOne</code> och <code>DiceGameController</code> har hög komplexitet och låg Maintainability Index, de klasserna är för stora och borde kanske brytas ned.</li>
        <li><strong>Coupled:</strong> <code>GameTwentyOne</code> är ganska stor (hög ClassRank) men har låg när det gäller underhållning, därför är den känslig för ändringar och pekar på för hög coupling.</li>
        <li><strong>Complex:</strong> Cyclomatic complexity på 11–13 och låg maintainability (runt 30) visar att några koder är för komplexa och måste göras enklare.</li>
        <li><strong>Covered:</strong> Testtäckningen på 10 % är låg och bör bättras för att undvika framtida möjliga problem.</li>
        <li><strong>CRAP:</strong> <code>GameTwentyOne</code> har en CRAP-score över 90, vilket ger en hög risk vid ändringar. Omstrukturering av koden kan behövas samt tester.</li>
    </ul>

    <h3>Förbättringar</h3>
    <p>Rätta till problem Scrutinizer tar upp om kodstil samt hur koden är uppbyggd. Lägga till kommentarer på koder som är i stort behov av det samt ta bort kod som inte fyller en funktion, det gör koden mindre. Det kommer göra koden främst enklare att underhålla men även lättare att läsa och bättre. Detta kommer troligtvis leda till högre kvalitetspoäng och färre fel.</p>

    <p>Stora metoder ska delas upp i mindre delar om möjligt. Koden kommer genom detta bli mindre svår och även enklare att underhålla samt korrigera. Det bör även sänka komplexiteten på koden.</p>

    <p>Fler enhetstester till koderna behövs med, för just testas endast 10%. Det kommer ge koden en stabilitet och säkerhet.</p>

    <p>Man kanske inte hinner göra alla korrigeringar man vill göra nu i efterhand men man kan göra en hel del.</p>

    <h3>Resultat efter förbättringar</h3>
    <p><strong>PhpMetrics:</strong><br>
    Maintainability Index: Flera under 70 → alla ≥ 70<br>
    Cyclomatic Complexity: 13 → 11<br>
    Violations: 7 → 5</p>

    <p><strong>Scrutinizer:</strong><br>
    Kvalitetspoäng: 9.93 → 10.0<br>
    Issues: 5 → 3<br>
    Kodtäckning: 10% → 15%<br>
    Klassrating: Några B och A → alla A</p>

    <p>Bild från PhpMetrics efter ändringar:</p>
    <img src="{{ asset('build/images/phpmetrics2.png') }}" alt="Phpmetrics cirklar" width="300">

    <h3>Diskussion</h3>
    <p>Att arbeta med kodkvalitet aktivt med verktyg som Phpmetrics och Scrutinizer är i mitt tycke effektivt. Jag lyckades snabbt identifiera svagheter i min kod, fokusera på dem och sedan kunna ha mätningar på effekten av mina förbättringar. En stor fördel är att dessa verktyg tar fram en reflektion kring kodens struktur och testbarhet. Men en nackdel med verktyg som dessa kan vara att man blir för fokuserad på poäng, och glömmer bort användbarhet eller enkelhet. Förutom stödverktyg man kan installera är löpande kodgranskningar, gemensamma kodstandarder och kodförbättringar bra för att säkerställa ren och väl fungerande kod.</p>
{% endblock %}
